%% Init goals 

%  Sets up goal trajectories for controller to use.x 

  

%% Discrete goals 

%  Get starting position from Baxter's current position 

states = ones(16,1)*-1000; 

bax_sub = rossubscriber('/robot/joint_states', rostype.sensor_msgs_JointState); 

%  Get updates for all joints 

msg = receive(bax_sub); 

states = joint_states(msg,length(msg.Position),states); 

while (min(states) < -500) 

    % Get another message 

    msg = receive(bax_sub); 

    % Get states from it 

    states = joint_states(msg); 

end 

initial_position = [0 states']; 

  

%% Goals 

%  Setup your goals and interpolate positions here 

  

Q_Baxter = [0.0, -0.0395000052880494, -0.0015339807878854137, 0.7570195188214517, 0.003451456772742181, -0.5526165788357204, -0.0015339807878854137, 1.2578642460660392, -0.0003834951969713534, -0.0030679615757708274, 0.7566360236244803, 0.0023009711818281204, -0.5460971604872072, 0.0, 1.2578642460660392, 0.0011504855909140602, -12.565987119160338; 

            0.0, -0.039883500485020755, 0.08015049616701286, 0.23853401251618184, -0.9579710020344409, -0.3608689803500436, 0.0015339807878854137, 1.3011992033238022, -0.06979612584878632, -0.002684466378799474, 0.7566360236244803, 0.0038349519697135344, -0.5445631796993219, -0.0003834951969713534, 1.257480750869068, 0.0007669903939427069, -12.565987119160338; 

            0.0, -0.0395000052880494, 0.15301458359157002, -0.04908738521233324, -1.0082088728376881, 0.029529130166794215, 0.015339807878854137, -1.5704128315976924, -0.2469709068495516, -0.002684466378799474, 0.7566360236244803, 0.0038349519697135344, -0.5449466748962932, 0.0, 1.257480750869068, 0.0007669903939427069, -12.565987119160338; 

            0.0, -0.039883500485020755, 0.317917518289252, 0.003451456772742181, -0.99171857936792, 0.04371845245473429, -1.1792477306869118, -1.5704128315976924, -0.24006799330406725, -0.002684466378799474, 0.7566360236244803, 0.003451456772742181, -0.548014636472064, -0.0003834951969713534, 1.2570972556720965, 0.0019174759848567672, -12.565987119160338; 

            0.0, -0.039883500485020755, 0.1234854534247758, -0.04793689962141918, -0.9967040169285476, -0.01227184630308331, -0.01342233189399737, -1.5704128315976924, -0.12156797743991904, -0.002684466378799474, 0.7566360236244803, 0.0030679615757708274, -0.5434126941084079, 0.0, 1.257480750869068, 0.0011504855909140602, -12.565987119160338; 

            0.0, -0.0395000052880494, 0.04947088040930459, -0.02569417819708068, -0.9909515889739773, -0.08513593372764046, 0.9476166317162144, -1.5692623460067783, -0.06979612584878632, -0.0019174759848567672, 0.757403014018423, 0.0038349519697135344, -0.5441796845023505, 0.0003834951969713534, 1.2578642460660392, 0.0019174759848567672, -12.565987119160338; 

            0.0, -0.039883500485020755, 0.0559902987578176, 0.15493205957642678, -0.9717768291254096, -0.11619904468232009, -0.03259709174256504, -1.5704128315976924, -0.06020874592450249, -0.0030679615757708274, 0.7566360236244803, 0.003451456772742181, -0.5441796845023505, 0.0, 1.257480750869068, 0.0011504855909140602, -12.565987119160338; 

            0.0, -0.0395000052880494, 0.15416506918248407, 0.22166022384944228, -0.9832816850345502, -0.11965050145506227, -0.9023641984735946, -1.5707963267946636, -0.06020874592450249, -0.002684466378799474, 0.7566360236244803, 0.003451456772742181, -0.5426457037144651, 0.0007669903939427069, 1.257480750869068, 0.0015339807878854137, -12.565987119160338; 

            0.0, -0.0395000052880494, 0.17027186745528092, 0.2247281854252131, -0.9921020745648913, -0.15684953556128356, 0.009970875121255189, -1.5681118604158641, -0.07631554419729933, -0.0030679615757708274, 0.7566360236244803, 0.0030679615757708274, -0.5464806556841787, 0.0, 1.257480750869068, 0.0011504855909140602, -12.565987119160338; 

            0.0, -0.0395000052880494, 0.17180584824316633, 0.2281796421979553, -1.000538968898261, -0.2001844928190465, 0.6112913439723374, -1.5335972926884425, 0.011504855909140603, -0.0023009711818281204, 0.756252528427509, 0.003451456772742181, -0.5445631796993219, 0.0, 1.257480750869068, 0.0, -12.565987119160338; 

            0.0, -0.0395000052880494, 0.16912138186436687, 0.298359263243713, -0.9886506177921491, -0.2001844928190465, -0.01917475984856767, -1.5638934132491793, -0.007669903939427069, -0.0030679615757708274, 0.7570195188214517, 0.004218447166684887, -0.5449466748962932, -0.0003834951969713534, 1.257480750869068, 0.0007669903939427069, -12.565987119160338; 

            0.0, -0.04026699568199211, 0.24313595487983808, 0.9744612955042091, -1.066500142777334, -0.20133497840996056, -0.09242234247009617, 0.14764565083397108, -1.657849736507161, -0.002684466378799474, 0.7566360236244803, 0.003451456772742181, -0.5464806556841787, -0.0003834951969713534, 1.2570972556720965, 0.0015339807878854137, -12.565987119160338; 

            0.0, -0.039883500485020755, 0.10891263593986437, 0.2051699303796741, -0.8977622561099384, 1.000538968898261, -0.3474466484560462, 0.15186409800065595, -2.0655051308877095, -0.0023009711818281204, 0.7566360236244803, 0.0038349519697135344, -0.5430291989114364, -0.0003834951969713534, 1.2578642460660392, 0.002684466378799474, -12.565987119160338]; 

Q_via = [Q_Baxter(:, 5:6), Q_Baxter(:, 3:4), Q_Baxter(:, 7:9), zeros(size(Q_Baxter,1), 9)]; 

  

             

  

Q = zeros(133,16); 

for i=1:12 

b = zeros(10,16);     

    for j=1:16 

        b0= Q_via(i,j); 

        b1 = 0; 

        b2 = 0; 

        b3 = 10*((Q_via(i+1,j)-Q_via(i,j))/9^3); 

        b4 = 15*((Q_via(i,j)-Q_via(i+1,j))/9^4); 

        b5 = 6*((Q_via(i+1,j)-Q_via(i,j))/9^5); 

        for t = 0:9 

            b(t+1,j) = b0 + b3*t^3 + b4*t^4 + b5*t^5;     

        end 

    end 

        Q(i+(i-1)*10, :) = Q_via(i,:); 

        Q(i+(i-1)*10 + 1: i+(i-1)*10 + 10, :) = b; 

end 

  

Q(133,:) = Q_via(13, :);  

  

TIME_STEP  = 30/133; 

  

 tStart = 0; 

 dx = TIME_STEP; 

 N = 133; 

 t = tStart + (0:N-1)*dx; 

  

 Q = [t',Q]; 

  

 goals = Q; 

  

  